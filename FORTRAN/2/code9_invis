        program main
        implicit none 
        real Pi
        parameter(pi = 3.1415926535)      
        real min_x, max_x, step_x, min_y, max_y, step_y, i, j,k
        integer steps_x, steps_y
        OPEN (1,FILE='C:\Users\hardb\Desktop\Input.txt')
        OPEN (2,FILE='C:\Users\hardb\Desktop\Output.txt') 
        
        read (1,*) min_x 
        read (1,*) max_x
        read (1,*) step_x
        read (1,*) min_y
        read (1,*) max_y
        read (1,*) step_y
       
        if(max_x .LT. min_x) then
            write(2,*) 'x incorrent range'
            stop
        else if(max_y .LT. min_y) then
            write(2,*) 'y incorrent range'
            
        else if(step_x .EQ. 0) then
            write(2,*) 'step x incorrent range'
            stop
        else if(step_y .EQ. 0) then
            write(2,*) 'step x incorrent range' 
            stop
        else
            write(2,'(A$)') '             | '
            do k = min_x, max_x, step_x
                write(2,'(e12.4$, (A$))') k, ' | '
                if(k+step_x .GT. max_x) then
                    write(2,'(f12.4$, (A$))') max_x, ' | '
                    min_x = min_x + step_x
                end if                
            end do 
            write(2,*) ' '
        
        
        

        
            do i = min_y, max_y, step_y
                write(2,'(e12.4$,(A$))') i, ' | '
                do j = min_x, max_x, step_x
                    call Func(j*pi/180.0,i*pi/180.0)    
                
                if(j+step_x .GT. max_x) then
                    call Func(max_x,i)
                end if                
                end do
                write (2,*) ' '
                
                if(i+step_y .GT. max_y) then
                    write(2,'(e12.4$,(A$))') max_y, ' | '
                    do j = min_x, max_x, step_x
                        call Func(j*pi/180.0,max_y)   
                        if(j+step_x .GT. max_x) then
                        call Func(max_x,i)
                        end if 
                    end do
                end if
            end do
        end if 
        end
       
       
       
        REAL FUNCTION sum_rump(X)
            real x,s,c,e, twosum
            s = 0.0
            c = 0.0
            s = twosum(x,s,e)
            sump_rump = s + c
            return
        end       
       
        REAL FUNCTION TWOSUM(ERROR, A, B)  
      
        IMPLICIT NONE
        REAL A, B, ERROR
        REAL s
        s = a + b
       
      
        END
        
        
        subroutine Func(x, y)             
            real x,y 
            if(cos(y) .NE. 0) then
                write (2, '(e12.4$, A$)') abs(sin(x)/cos(y)),' | ' 
            else
                write(2, '(A$)') '  div. by 0  | '
            end if             
            return
        end
        
        logical function IsInvisible(x,y)
        implicit none
        real x,y
        integer a,b 
        a = Exp(x)
        b = Exp(y)
        if( (a-b) .NE. 0) then
            IsInvisible = .TRUE.
            return
        else
            IsInvisible = .FALSE.
            return
        end if         
        end
        
        
                integer function Exp(x)
                implicit none
                real x, k
                integer i, j
                j = 0
                k = 1
                exp = x
                if(x .GT. 10000) then 
                    j = x/10000
                    k = 0.1
                    if(x/10000 .NE. 0) then
                        j = j + 1
                    end if
                else if (x .LT. 1000) then
                    j = 1000/x   
                    k = 10
                    if(1000/x .NE. 0) then
                        j = j + 1
                    end if  
                end if
                
                call Times(j)
                
                do i = 1, j
                    exp = exp * k
                end do
                end
                
                subroutine Times(j)
                implicit none
                integer i, k, j                
                k = j
                if(j .NE. 0) then
                j = 1
                else 
                j = 0 
                end if
                do i = 1, 10
                    if(k/10 .EQ. 0) then 
                        return
                    else
                        k = k / 10
                        j = j +1
                    end if
                end do
                
                end
       
               
                
