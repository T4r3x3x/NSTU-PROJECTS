        program main
        
        real min_x, max_x, step_x, min_y, max_y, step_y, i, j,x,y
        real temp, sum_rump
        integer steps_x, steps_y
        logical invisible 
        OPEN (1,FILE='C:\Users\irobo\Desktop\Input.txt')
        OPEN (2,FILE='C:\Users\irobo\Desktop\Output.txt') 
        
        read (1,*) min_x 
        read (1,*) max_x
        read (1,*) step_x
        read (1,*) min_y
        read (1,*) max_y
        read (1,*) step_y
        
        x = min_x
        y = min_y
                
        steps_x = (max_x-min_x)/step_x + 1
        steps_y = (max_y-min_y)/step_y+ 1        
        write(2,'(A$)') '             | '
        
         do i = 0, steps_x            
            if(invisible(x,sum_rump(min_x,i*step_x))) then    
                x = sum_rump(min_x,i*step_x)          
                write(2,'(e12.4$,(A$))') x, ' | '                  
            else   
                x = sum_rump(min_x,i*step_x)  
            end if              
             end do
        
        if(x .LT. max_x) then
            write(2,'(e12.4$, (A$))') max_x, ' | '
        end if     
        
        write (2,*) ' '
        
        do i = 0, steps_y
             if(invisible(y,sum_rump(min_y,i*step_y))) then 
                y = sum_rump(min_y,i*step_y)
                write(2,'(e12.4$,(A$))') y, ' | '
             else
                         y = sum_rump(min_y,i*step_y)
            end if
            x = min_x
            do j = 0, steps_x
                if(invisible(x,sum_rump(min_x,j*step_x))) then 
                    x = sum_rump(min_x,j*step_x)                
                    call func(x,y)              
                else
                x = sum_rump(min_x,j*step_x)
                end if
            end do 
            
            if(x .LT. max_x) then
                call Func(max_x,y)
            end if
            
            write (2,*) ' '                            
        end do
        
        if(y .LT. max_y) then
                    write(2,'(e12.4$,(A$))') max_y, ' | '
                    y = max_y
                    x = min_x
                    do j = 0, steps_x
                        if(invisible(x,sum_rump(min_x,j*step_x))) then 
                            x = sum_rump(min_x,j*step_x)                
                            call func(x,y)              
                        else 
                        x = sum_rump(min_x,j*step_x)                       
                        end if
                    end do 
            
                    if(x .LT. max_x) then
                        call Func(max_x,y)
                    end if
            end if                    
        
        end 
       
       
       
        real function sum_rump (x,y)
        real s, c, e, x, y
        s = two_sum (e, y, x)
        c = c + e
        sum_rump = s + c
        return
        end

        real function two_sum (error, a, b)
        real s,bs,as,error,a,b
        s = a + b
        bs = s - a
        as = s - bs
        error = (b - bs) + (a - as)
        two_sum = s
        return
        end
        
        
        subroutine Func(x, y)             
            real x,y 
            if(cos(y) .NE. 0) then
                write (2, '(e12.4$, A$)') abs(sin(x)/cos(y)),' | ' 
            else
                write(2, '(A$)') '  div. by 0  | '
            end if             
            return
        end
        
               
                  
                 logical function Invisible(x,y)
                 implicit none
                 real x,y
                 integer a,b
                 a = int( exp (x))
                 b = int( exp (y))

                 if(a-b .EQ. 0) then
                    Invisible = .TRUE.
                    return
                 else
                    Invisible = .FALSE.               
                    return
                  end if
                  end
                
                
                
                
                real function Exp(x)
                implicit none
                real x 
                character*12 line
                write(line,'(e12.4)') x
                read(line,'(e12.4)')exp
                return
                end
