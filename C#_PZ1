using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;


//12 v.
namespace minecsharp
{
    class Program
    {
        static string readPath = @"C:\Users\hardb\Desktop\C#.txt";
        static string writePath = @"C:\Users\hardb\Desktop\C#2.txt";

        static void Main(string[] args)
        {
            bool isReverse = false;
            bool isAnswered = false;


            List<Person> persons = new List<Person>(1);

            //чтение файла и создание массива персон
            GetFile(persons);

            Console.WriteLine("Сортировка по возрастанию?");

            while (!isAnswered)
            {
                switch (Console.ReadLine())
                {
                    case "да":
                        isReverse = false;
                        isAnswered = true;
                        break;
                    case "нет":
                        isReverse = true;
                        isAnswered = true;
                        break;
                    default:
                        Console.WriteLine("Повторите");
                        break;
                }
            }
            if (isReverse)
                persons = persons.OrderByDescending(Person => Person.Birthday).ToList();
            else
                persons = persons.OrderBy(Person => Person.Birthday).ToList();
            SetFile(persons);
            Console.Read();
        }


        static void SetFile(List<Person> persons)
        {
            using (StreamWriter sw = new StreamWriter(writePath, false, System.Text.Encoding.UTF8))
            {
                for (int i = 0; i < persons.Count(); i++)
                {
                    sw.WriteLine(persons[i]);
                }
            }
        }

        static void GetFile(List<Person> persons)
        {
            using (StreamReader sr = new StreamReader(readPath, Encoding.UTF8))
            {
                CreatePersonList(persons, sr);
            }
        }

        static void CreatePersonList(List<Person> persons, StreamReader sr)
        {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                persons.Add(Person.Parse(line));
            }
        }
    }

    class Person
    {
        public Person(string lastname, string name, string middlename, bool sex, double weight, DateTime birthday)
        {
            Lastname = lastname;
            Name = name;
            Middlename = middlename;
            this.sex = sex;
            Weight = weight;
            Birthday = birthday;
        }

        public static Person Parse(string text)
        {
            string[] data = text.Split(' ');
            Person person = new Person(data[0], data[1], data[2], data[3] == "Male" ? true : false, Double.Parse(data[5]), DateTime.Parse(data[6]));
            return person;

        }

        public override string ToString()
        {
            string data = $"{Lastname} {Name} {Middlename}, {(sex ? "Male" : "Female")}, {Weight:E4} кг, {Birthday.ToString(@"dd\ MMM/ yyyy")} {Age}";
            return data;
        }

        #region properties 
        public string Lastname
        {
            get;
        }
        public string Name
        {
            get;
        }
        public string Middlename
        {
            get;
        }
        bool sex;
        public double Weight
        {
            get;
        }
        public DateTime Birthday
        {
            get;
        }
        public int Age
        {
            get
            {
                var today = DateTime.Today;
                int age = today.Year - Birthday.Year;
                if (Birthday > today.AddYears(-age)) age--;
                return age;
            }
        }

        public bool Sex
        {
            get
            {
                return sex;
            }
        }
        #endregion
    }
}
